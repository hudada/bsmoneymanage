package com.example.bsproperty.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_BEAN".
*/
public class NewBeanDao extends AbstractDao<NewBean, Long> {

    public static final String TABLENAME = "NEW_BEAN";

    /**
     * Properties of entity NewBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TypeId = new Property(1, Long.class, "typeId", false, "TYPE_ID");
        public final static Property AccId = new Property(2, Long.class, "accId", false, "ACC_ID");
        public final static Property Time = new Property(3, Long.class, "time", false, "TIME");
        public final static Property Money = new Property(4, double.class, "money", false, "MONEY");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
    }


    public NewBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NewBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE_ID\" INTEGER NOT NULL ," + // 1: typeId
                "\"ACC_ID\" INTEGER NOT NULL ," + // 2: accId
                "\"TIME\" INTEGER NOT NULL ," + // 3: time
                "\"MONEY\" REAL NOT NULL ," + // 4: money
                "\"ADDRESS\" TEXT NOT NULL );"); // 5: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTypeId());
        stmt.bindLong(3, entity.getAccId());
        stmt.bindLong(4, entity.getTime());
        stmt.bindDouble(5, entity.getMoney());
        stmt.bindString(6, entity.getAddress());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTypeId());
        stmt.bindLong(3, entity.getAccId());
        stmt.bindLong(4, entity.getTime());
        stmt.bindDouble(5, entity.getMoney());
        stmt.bindString(6, entity.getAddress());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NewBean readEntity(Cursor cursor, int offset) {
        NewBean entity = new NewBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // typeId
            cursor.getLong(offset + 2), // accId
            cursor.getLong(offset + 3), // time
            cursor.getDouble(offset + 4), // money
            cursor.getString(offset + 5) // address
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeId(cursor.getLong(offset + 1));
        entity.setAccId(cursor.getLong(offset + 2));
        entity.setTime(cursor.getLong(offset + 3));
        entity.setMoney(cursor.getDouble(offset + 4));
        entity.setAddress(cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
